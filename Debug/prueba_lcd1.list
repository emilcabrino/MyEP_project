
prueba_lcd1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800224c  0800224c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800224c  0800224c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800224c  0800224c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800224c  0800224c  0001224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002250  08002250  00012250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000018  0800226c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800226c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f2a  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001901  00000000  00000000  00029f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c07  00000000  00000000  0002ce98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b343  00000000  00000000  00043a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e88  00000000  00000000  0004ede2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4c6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb0  00000000  00000000  000d4cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080021e8 	.word	0x080021e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080021e8 	.word	0x080021e8

0800014c <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <delay+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <delay+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <delay+0x14>
}
 800016c:	bf00      	nop
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c

0800017c <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	6039      	str	r1, [r7, #0]
 8000186:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000188:	683b      	ldr	r3, [r7, #0]
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000192:	4821      	ldr	r0, [pc, #132]	; (8000218 <send_to_lcd+0x9c>)
 8000194:	f000 ff2d 	bl	8000ff2 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	08db      	lsrs	r3, r3, #3
 800019c:	b2db      	uxtb	r3, r3
 800019e:	f003 0301 	and.w	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	2180      	movs	r1, #128	; 0x80
 80001a8:	481c      	ldr	r0, [pc, #112]	; (800021c <send_to_lcd+0xa0>)
 80001aa:	f000 ff22 	bl	8000ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	089b      	lsrs	r3, r3, #2
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	f003 0301 	and.w	r3, r3, #1
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	461a      	mov	r2, r3
 80001bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c0:	4815      	ldr	r0, [pc, #84]	; (8000218 <send_to_lcd+0x9c>)
 80001c2:	f000 ff16 	bl	8000ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	085b      	lsrs	r3, r3, #1
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	f003 0301 	and.w	r3, r3, #1
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	461a      	mov	r2, r3
 80001d4:	2120      	movs	r1, #32
 80001d6:	4811      	ldr	r0, [pc, #68]	; (800021c <send_to_lcd+0xa0>)
 80001d8:	f000 ff0b 	bl	8000ff2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	461a      	mov	r2, r3
 80001e6:	2110      	movs	r1, #16
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <send_to_lcd+0xa0>)
 80001ea:	f000 ff02 	bl	8000ff2 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2108      	movs	r1, #8
 80001f2:	480a      	ldr	r0, [pc, #40]	; (800021c <send_to_lcd+0xa0>)
 80001f4:	f000 fefd 	bl	8000ff2 <HAL_GPIO_WritePin>
	delay (20);
 80001f8:	2014      	movs	r0, #20
 80001fa:	f7ff ffa7 	bl	800014c <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2108      	movs	r1, #8
 8000202:	4806      	ldr	r0, [pc, #24]	; (800021c <send_to_lcd+0xa0>)
 8000204:	f000 fef5 	bl	8000ff2 <HAL_GPIO_WritePin>
	delay (20);
 8000208:	2014      	movs	r0, #20
 800020a:	f7ff ff9f 	bl	800014c <delay>
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40010c00 	.word	0x40010c00
 800021c:	40010800 	.word	0x40010800

08000220 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	091b      	lsrs	r3, r3, #4
 800022e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f7ff ffa1 	bl	800017c <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	f003 030f 	and.w	r3, r3, #15
 8000240:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ff98 	bl	800017c <send_to_lcd>
}
 800024c:	bf00      	nop
 800024e:	3710      	adds	r7, #16
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	091b      	lsrs	r3, r3, #4
 8000262:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000264:	7bfb      	ldrb	r3, [r7, #15]
 8000266:	2101      	movs	r1, #1
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ff87 	bl	800017c <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	f003 030f 	and.w	r3, r3, #15
 8000274:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	2101      	movs	r1, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff7e 	bl	800017c <send_to_lcd>
}
 8000280:	bf00      	nop
 8000282:	3710      	adds	r7, #16
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <lcd_clear>:

void lcd_clear (void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800028c:	2001      	movs	r0, #1
 800028e:	f7ff ffc7 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(2);
 8000292:	2002      	movs	r0, #2
 8000294:	f000 fbe0 	bl	8000a58 <HAL_Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
    switch (row)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d003      	beq.n	80002b4 <lcd_put_cur+0x18>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d005      	beq.n	80002be <lcd_put_cur+0x22>
 80002b2:	e009      	b.n	80002c8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ba:	603b      	str	r3, [r7, #0]
            break;
 80002bc:	e004      	b.n	80002c8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002c4:	603b      	str	r3, [r7, #0]
            break;
 80002c6:	bf00      	nop
    }

    lcd_send_cmd (col);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ffa7 	bl	8000220 <lcd_send_cmd>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <lcd_init>:


void lcd_init (void)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80002de:	2032      	movs	r0, #50	; 0x32
 80002e0:	f000 fbba 	bl	8000a58 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002e4:	2030      	movs	r0, #48	; 0x30
 80002e6:	f7ff ff9b 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80002ea:	2005      	movs	r0, #5
 80002ec:	f000 fbb4 	bl	8000a58 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002f0:	2030      	movs	r0, #48	; 0x30
 80002f2:	f7ff ff95 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002f6:	2001      	movs	r0, #1
 80002f8:	f000 fbae 	bl	8000a58 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002fc:	2030      	movs	r0, #48	; 0x30
 80002fe:	f7ff ff8f 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 8000302:	200a      	movs	r0, #10
 8000304:	f000 fba8 	bl	8000a58 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000308:	2020      	movs	r0, #32
 800030a:	f7ff ff89 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(10);
 800030e:	200a      	movs	r0, #10
 8000310:	f000 fba2 	bl	8000a58 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000314:	2028      	movs	r0, #40	; 0x28
 8000316:	f7ff ff83 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 800031a:	2001      	movs	r0, #1
 800031c:	f000 fb9c 	bl	8000a58 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000320:	2008      	movs	r0, #8
 8000322:	f7ff ff7d 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 8000326:	2001      	movs	r0, #1
 8000328:	f000 fb96 	bl	8000a58 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff77 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 8000332:	2001      	movs	r0, #1
 8000334:	f000 fb90 	bl	8000a58 <HAL_Delay>
	HAL_Delay(1);
 8000338:	2001      	movs	r0, #1
 800033a:	f000 fb8d 	bl	8000a58 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800033e:	2006      	movs	r0, #6
 8000340:	f7ff ff6e 	bl	8000220 <lcd_send_cmd>
	HAL_Delay(1);
 8000344:	2001      	movs	r0, #1
 8000346:	f000 fb87 	bl	8000a58 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800034a:	200c      	movs	r0, #12
 800034c:	f7ff ff68 	bl	8000220 <lcd_send_cmd>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800035c:	e006      	b.n	800036c <lcd_send_string+0x18>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	1c5a      	adds	r2, r3, #1
 8000362:	607a      	str	r2, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff74 	bl	8000254 <lcd_send_data>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d1f4      	bne.n	800035e <lcd_send_string+0xa>
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f000 fb05 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f867 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f000 f925 	bl	80005dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000392:	f000 f8a9 	bl	80004e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000396:	f000 f8f7 	bl	8000588 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim1);
 800039a:	4829      	ldr	r0, [pc, #164]	; (8000440 <main+0xc0>)
 800039c:	f001 fadc 	bl	8001958 <HAL_TIM_Base_Start>

lcd_init();
 80003a0:	f7ff ff9b 	bl	80002da <lcd_init>
lcd_put_cur(0, 0);
 80003a4:	2100      	movs	r1, #0
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ff78 	bl	800029c <lcd_put_cur>
lcd_send_string("HELLO ");
 80003ac:	4825      	ldr	r0, [pc, #148]	; (8000444 <main+0xc4>)
 80003ae:	f7ff ffd1 	bl	8000354 <lcd_send_string>
lcd_send_string("WORLD ");
 80003b2:	4825      	ldr	r0, [pc, #148]	; (8000448 <main+0xc8>)
 80003b4:	f7ff ffce 	bl	8000354 <lcd_send_string>
lcd_send_string("FROM");
 80003b8:	4824      	ldr	r0, [pc, #144]	; (800044c <main+0xcc>)
 80003ba:	f7ff ffcb 	bl	8000354 <lcd_send_string>
lcd_put_cur(1, 0);
 80003be:	2100      	movs	r1, #0
 80003c0:	2001      	movs	r0, #1
 80003c2:	f7ff ff6b 	bl	800029c <lcd_put_cur>
lcd_send_string("EMIL2FACES");
 80003c6:	4822      	ldr	r0, [pc, #136]	; (8000450 <main+0xd0>)
 80003c8:	f7ff ffc4 	bl	8000354 <lcd_send_string>
HAL_Delay(4000);
 80003cc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80003d0:	f000 fb42 	bl	8000a58 <HAL_Delay>
lcd_clear();
 80003d4:	f7ff ff58 	bl	8000288 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i=0;i<128;i++)
 80003d8:	2300      	movs	r3, #0
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	e02c      	b.n	8000438 <main+0xb8>
	  {
		  lcd_put_cur(row, col);
 80003de:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <main+0xd4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <main+0xd8>)
 80003e4:	6812      	ldr	r2, [r2, #0]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff57 	bl	800029c <lcd_put_cur>
		  lcd_send_data(i+48);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	3330      	adds	r3, #48	; 0x30
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff2c 	bl	8000254 <lcd_send_data>
		  col++;
 80003fc:	4b16      	ldr	r3, [pc, #88]	; (8000458 <main+0xd8>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a15      	ldr	r2, [pc, #84]	; (8000458 <main+0xd8>)
 8000404:	6013      	str	r3, [r2, #0]
		  if(col>15){row++; col=0;}
 8000406:	4b14      	ldr	r3, [pc, #80]	; (8000458 <main+0xd8>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b0f      	cmp	r3, #15
 800040c:	dd07      	ble.n	800041e <main+0x9e>
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <main+0xd4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	3301      	adds	r3, #1
 8000414:	4a0f      	ldr	r2, [pc, #60]	; (8000454 <main+0xd4>)
 8000416:	6013      	str	r3, [r2, #0]
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <main+0xd8>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
		  if(row>1) row=0;
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <main+0xd4>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	dd02      	ble.n	800042c <main+0xac>
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <main+0xd4>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
		  HAL_Delay(250);
 800042c:	20fa      	movs	r0, #250	; 0xfa
 800042e:	f000 fb13 	bl	8000a58 <HAL_Delay>
	  for(int i=0;i<128;i++)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3301      	adds	r3, #1
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b7f      	cmp	r3, #127	; 0x7f
 800043c:	ddcf      	ble.n	80003de <main+0x5e>
 800043e:	e7cb      	b.n	80003d8 <main+0x58>
 8000440:	2000007c 	.word	0x2000007c
 8000444:	08002200 	.word	0x08002200
 8000448:	08002208 	.word	0x08002208
 800044c:	08002210 	.word	0x08002210
 8000450:	08002218 	.word	0x08002218
 8000454:	20000034 	.word	0x20000034
 8000458:	20000038 	.word	0x20000038

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b090      	sub	sp, #64	; 0x40
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	f107 0318 	add.w	r3, r7, #24
 8000466:	2228      	movs	r2, #40	; 0x28
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f001 feb4 	bl	80021d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800047e:	2301      	movs	r3, #1
 8000480:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000486:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048c:	2301      	movs	r3, #1
 800048e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2302      	movs	r3, #2
 8000492:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800049a:	2300      	movs	r3, #0
 800049c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049e:	f107 0318 	add.w	r3, r7, #24
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fdee 	bl	8001084 <HAL_RCC_OscConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80004ae:	f000 f96d 	bl	800078c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	230f      	movs	r3, #15
 80004b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b6:	2302      	movs	r3, #2
 80004b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80004c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 f858 	bl	8001584 <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004da:	f000 f957 	bl	800078c <Error_Handler>
  }
}
 80004de:	bf00      	nop
 80004e0:	3740      	adds	r7, #64	; 0x40
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fc:	463b      	mov	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000504:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_TIM1_Init+0x98>)
 8000506:	4a1f      	ldr	r2, [pc, #124]	; (8000584 <MX_TIM1_Init+0x9c>)
 8000508:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MX_TIM1_Init+0x98>)
 800050c:	2247      	movs	r2, #71	; 0x47
 800050e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_TIM1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_TIM1_Init+0x98>)
 8000518:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800051c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_TIM1_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_TIM1_Init+0x98>)
 8000526:	2200      	movs	r2, #0
 8000528:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_TIM1_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000530:	4813      	ldr	r0, [pc, #76]	; (8000580 <MX_TIM1_Init+0x98>)
 8000532:	f001 f9c1 	bl	80018b8 <HAL_TIM_Base_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800053c:	f000 f926 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	4619      	mov	r1, r3
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <MX_TIM1_Init+0x98>)
 800054e:	f001 fa4d 	bl	80019ec <HAL_TIM_ConfigClockSource>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000558:	f000 f918 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055c:	2300      	movs	r3, #0
 800055e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	4619      	mov	r1, r3
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <MX_TIM1_Init+0x98>)
 800056a:	f001 fbfb 	bl	8001d64 <HAL_TIMEx_MasterConfigSynchronization>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000574:	f000 f90a 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000578:	bf00      	nop
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	2000007c 	.word	0x2000007c
 8000584:	40012c00 	.word	0x40012c00

08000588 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <MX_USART1_UART_Init+0x50>)
 8000590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 8000594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005ae:	220c      	movs	r2, #12
 80005b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005c0:	f001 fc2e 	bl	8001e20 <HAL_UART_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ca:	f000 f8df 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000003c 	.word	0x2000003c
 80005d8:	40013800 	.word	0x40013800

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f0:	4b3c      	ldr	r3, [pc, #240]	; (80006e4 <MX_GPIO_Init+0x108>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a3b      	ldr	r2, [pc, #236]	; (80006e4 <MX_GPIO_Init+0x108>)
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <MX_GPIO_Init+0x108>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0320 	and.w	r3, r3, #32
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <MX_GPIO_Init+0x108>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a35      	ldr	r2, [pc, #212]	; (80006e4 <MX_GPIO_Init+0x108>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <MX_GPIO_Init+0x108>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <MX_GPIO_Init+0x108>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a2f      	ldr	r2, [pc, #188]	; (80006e4 <MX_GPIO_Init+0x108>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <MX_GPIO_Init+0x108>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000638:	2200      	movs	r2, #0
 800063a:	21bd      	movs	r1, #189	; 0xbd
 800063c:	482a      	ldr	r0, [pc, #168]	; (80006e8 <MX_GPIO_Init+0x10c>)
 800063e:	f000 fcd8 	bl	8000ff2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f640 4101 	movw	r1, #3073	; 0xc01
 8000648:	4828      	ldr	r0, [pc, #160]	; (80006ec <MX_GPIO_Init+0x110>)
 800064a:	f000 fcd2 	bl	8000ff2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4
                           PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800064e:	23bd      	movs	r3, #189	; 0xbd
 8000650:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	4820      	ldr	r0, [pc, #128]	; (80006e8 <MX_GPIO_Init+0x10c>)
 8000666:	f000 fb29 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800066a:	2342      	movs	r3, #66	; 0x42
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	481a      	ldr	r0, [pc, #104]	; (80006e8 <MX_GPIO_Init+0x10c>)
 800067e:	f000 fb1d 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin PB10 PB11 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_10|GPIO_PIN_11;
 8000682:	f640 4301 	movw	r3, #3073	; 0xc01
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <MX_GPIO_Init+0x110>)
 800069c:	f000 fb0e 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4619      	mov	r1, r3
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_GPIO_Init+0x110>)
 80006b6:	f000 fb01 	bl	8000cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2007      	movs	r0, #7
 80006c0:	f000 fac5 	bl	8000c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006c4:	2007      	movs	r0, #7
 80006c6:	f000 fade 	bl	8000c86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2017      	movs	r0, #23
 80006d0:	f000 fabd 	bl	8000c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006d4:	2017      	movs	r0, #23
 80006d6:	f000 fad6 	bl	8000c86 <HAL_NVIC_EnableIRQ>

}
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010800 	.word	0x40010800
 80006ec:	40010c00 	.word	0x40010c00
 80006f0:	10110000 	.word	0x10110000

080006f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
  /*
   *Esta rutina toma las interupciones externas y segun el valor de read a o read b asigna sentido dde giro, sino se asume boton
   */
  uint8_t readA = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80006fe:	2102      	movs	r1, #2
 8000700:	481c      	ldr	r0, [pc, #112]	; (8000774 <HAL_GPIO_EXTI_Callback+0x80>)
 8000702:	f000 fc5f 	bl	8000fc4 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
  uint8_t readB = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800070a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <HAL_GPIO_EXTI_Callback+0x84>)
 8000710:	f000 fc58 	bl	8000fc4 <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	73bb      	strb	r3, [r7, #14]
  if(GPIO_Pin == GPIO_PIN_1){
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d11b      	bne.n	8000756 <HAL_GPIO_EXTI_Callback+0x62>
    if (readA==1 && readB==1){
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d10d      	bne.n	8000740 <HAL_GPIO_EXTI_Callback+0x4c>
 8000724:	7bbb      	ldrb	r3, [r7, #14]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d10a      	bne.n	8000740 <HAL_GPIO_EXTI_Callback+0x4c>
      HAL_UART_Transmit(&huart1, txbuffera, 4, 10);
 800072a:	230a      	movs	r3, #10
 800072c:	2204      	movs	r2, #4
 800072e:	4913      	ldr	r1, [pc, #76]	; (800077c <HAL_GPIO_EXTI_Callback+0x88>)
 8000730:	4813      	ldr	r0, [pc, #76]	; (8000780 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000732:	f001 fbc2 	bl	8001eba <HAL_UART_Transmit>
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000736:	2101      	movs	r1, #1
 8000738:	480f      	ldr	r0, [pc, #60]	; (8000778 <HAL_GPIO_EXTI_Callback+0x84>)
 800073a:	f000 fc72 	bl	8001022 <HAL_GPIO_TogglePin>
  }else{
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    HAL_UART_Transmit(&huart1, txbufferc, 4, 10);
   }

}
 800073e:	e014      	b.n	800076a <HAL_GPIO_EXTI_Callback+0x76>
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000740:	2101      	movs	r1, #1
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <HAL_GPIO_EXTI_Callback+0x84>)
 8000744:	f000 fc6d 	bl	8001022 <HAL_GPIO_TogglePin>
      HAL_UART_Transmit(&huart1, txbufferb, 4, 10);
 8000748:	230a      	movs	r3, #10
 800074a:	2204      	movs	r2, #4
 800074c:	490d      	ldr	r1, [pc, #52]	; (8000784 <HAL_GPIO_EXTI_Callback+0x90>)
 800074e:	480c      	ldr	r0, [pc, #48]	; (8000780 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000750:	f001 fbb3 	bl	8001eba <HAL_UART_Transmit>
}
 8000754:	e009      	b.n	800076a <HAL_GPIO_EXTI_Callback+0x76>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000756:	2101      	movs	r1, #1
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <HAL_GPIO_EXTI_Callback+0x84>)
 800075a:	f000 fc62 	bl	8001022 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, txbufferc, 4, 10);
 800075e:	230a      	movs	r3, #10
 8000760:	2204      	movs	r2, #4
 8000762:	4909      	ldr	r1, [pc, #36]	; (8000788 <HAL_GPIO_EXTI_Callback+0x94>)
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000766:	f001 fba8 	bl	8001eba <HAL_UART_Transmit>
}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40010800 	.word	0x40010800
 8000778:	40010c00 	.word	0x40010c00
 800077c:	20000000 	.word	0x20000000
 8000780:	2000003c 	.word	0x2000003c
 8000784:	20000004 	.word	0x20000004
 8000788:	20000008 	.word	0x20000008

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <HAL_MspInit+0x5c>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_MspInit+0x5c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_MspInit+0x5c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_MspInit+0x5c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_MspInit+0x60>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <HAL_MspInit+0x60>)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010000 	.word	0x40010000

080007fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a09      	ldr	r2, [pc, #36]	; (8000830 <HAL_TIM_Base_MspInit+0x34>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d10b      	bne.n	8000826 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_TIM_Base_MspInit+0x38>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_TIM_Base_MspInit+0x38>)
 8000814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_TIM_Base_MspInit+0x38>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40012c00 	.word	0x40012c00
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <HAL_UART_MspInit+0x8c>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d131      	bne.n	80008bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_UART_MspInit+0x90>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a1a      	ldr	r2, [pc, #104]	; (80008c8 <HAL_UART_MspInit+0x90>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_UART_MspInit+0x90>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_UART_MspInit+0x90>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <HAL_UART_MspInit+0x90>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_UART_MspInit+0x90>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <HAL_UART_MspInit+0x94>)
 800089e:	f000 fa0d 	bl	8000cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_UART_MspInit+0x94>)
 80008b8:	f000 fa00 	bl	8000cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010800 	.word	0x40010800

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f883 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}

0800091e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000922:	2002      	movs	r0, #2
 8000924:	f000 fb96 	bl	8001054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000930:	2040      	movs	r0, #64	; 0x40
 8000932:	f000 fb8f 	bl	8001054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}

0800093a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
	...

08000948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000948:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800094a:	e003      	b.n	8000954 <LoopCopyDataInit>

0800094c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800094e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000950:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000952:	3104      	adds	r1, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000958:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800095a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800095c:	d3f6      	bcc.n	800094c <CopyDataInit>
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000960:	e002      	b.n	8000968 <LoopFillZerobss>

08000962 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000964:	f842 3b04 	str.w	r3, [r2], #4

08000968 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800096a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800096c:	d3f9      	bcc.n	8000962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096e:	f7ff ffe4 	bl	800093a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f001 fc0d 	bl	8002190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fd03 	bl	8000380 <main>
  bx lr
 800097a:	4770      	bx	lr
  ldr r3, =_sidata
 800097c:	08002254 	.word	0x08002254
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000984:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000988:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 800098c:	200000c8 	.word	0x200000c8

08000990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_2_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x28>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f947 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fef2 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f95f 	bl	8000ca2 <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	f000 f927 	bl	8000c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000000c 	.word	0x2000000c
 8000a18:	20000014 	.word	0x20000014
 8000a1c:	20000010 	.word	0x20000010

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x20>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_IncTick+0x20>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000014 	.word	0x20000014
 8000a40:	200000c4 	.word	0x200000c4

08000a44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <HAL_GetTick+0x10>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	200000c4 	.word	0x200000c4

08000a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a60:	f7ff fff0 	bl	8000a44 <HAL_GetTick>
 8000a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a70:	d005      	beq.n	8000a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_Delay+0x44>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a7e:	bf00      	nop
 8000a80:	f7ff ffe0 	bl	8000a44 <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d8f7      	bhi.n	8000a80 <HAL_Delay+0x28>
  {
  }
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000014 	.word	0x20000014

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db0b      	blt.n	8000b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 021f 	and.w	r2, r3, #31
 8000b1c:	4906      	ldr	r1, [pc, #24]	; (8000b38 <__NVIC_EnableIRQ+0x34>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	095b      	lsrs	r3, r3, #5
 8000b24:	2001      	movs	r0, #1
 8000b26:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c18:	f7ff ff90 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff2d 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff42 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff90 	bl	8000b90 <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5f 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff35 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffa2 	bl	8000bf4 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b08b      	sub	sp, #44	; 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e169      	b.n	8000fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f040 8158 	bne.w	8000f9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4a9a      	ldr	r2, [pc, #616]	; (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d05e      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000cf8:	4a98      	ldr	r2, [pc, #608]	; (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d875      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000cfe:	4a98      	ldr	r2, [pc, #608]	; (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d058      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d04:	4a96      	ldr	r2, [pc, #600]	; (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d86f      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d0a:	4a96      	ldr	r2, [pc, #600]	; (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d052      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d10:	4a94      	ldr	r2, [pc, #592]	; (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d869      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d16:	4a94      	ldr	r2, [pc, #592]	; (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d04c      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d1c:	4a92      	ldr	r2, [pc, #584]	; (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d863      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d22:	4a92      	ldr	r2, [pc, #584]	; (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d046      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d28:	4a90      	ldr	r2, [pc, #576]	; (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d85d      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d2e:	2b12      	cmp	r3, #18
 8000d30:	d82a      	bhi.n	8000d88 <HAL_GPIO_Init+0xcc>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d859      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <HAL_GPIO_Init+0x80>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000d91 	.word	0x08000d91
 8000d44:	08000da3 	.word	0x08000da3
 8000d48:	08000de5 	.word	0x08000de5
 8000d4c:	08000deb 	.word	0x08000deb
 8000d50:	08000deb 	.word	0x08000deb
 8000d54:	08000deb 	.word	0x08000deb
 8000d58:	08000deb 	.word	0x08000deb
 8000d5c:	08000deb 	.word	0x08000deb
 8000d60:	08000deb 	.word	0x08000deb
 8000d64:	08000deb 	.word	0x08000deb
 8000d68:	08000deb 	.word	0x08000deb
 8000d6c:	08000deb 	.word	0x08000deb
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000deb 	.word	0x08000deb
 8000d78:	08000deb 	.word	0x08000deb
 8000d7c:	08000deb 	.word	0x08000deb
 8000d80:	08000d99 	.word	0x08000d99
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	4a79      	ldr	r2, [pc, #484]	; (8000f70 <HAL_GPIO_Init+0x2b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8e:	e02c      	b.n	8000dea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e029      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e024      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	3308      	adds	r3, #8
 8000da8:	623b      	str	r3, [r7, #32]
          break;
 8000daa:	e01f      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	330c      	adds	r3, #12
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e01a      	b.n	8000dec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e013      	b.n	8000dec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	611a      	str	r2, [r3, #16]
          break;
 8000dd6:	e009      	b.n	8000dec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	615a      	str	r2, [r3, #20]
          break;
 8000de2:	e003      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x130>
          break;
 8000dea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2bff      	cmp	r3, #255	; 0xff
 8000df0:	d801      	bhi.n	8000df6 <HAL_GPIO_Init+0x13a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	e001      	b.n	8000dfa <HAL_GPIO_Init+0x13e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2bff      	cmp	r3, #255	; 0xff
 8000e00:	d802      	bhi.n	8000e08 <HAL_GPIO_Init+0x14c>
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x152>
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	3b08      	subs	r3, #8
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	210f      	movs	r1, #15
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	6a39      	ldr	r1, [r7, #32]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e54:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1ec>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a3f      	ldr	r2, [pc, #252]	; (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e8>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a3d      	ldr	r2, [pc, #244]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	e004      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e002      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eac:	f002 0203 	and.w	r2, r2, #3
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	4093      	lsls	r3, r2
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eba:	492f      	ldr	r1, [pc, #188]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	492c      	ldr	r1, [pc, #176]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4928      	ldr	r1, [pc, #160]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	4922      	ldr	r1, [pc, #136]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	491e      	ldr	r1, [pc, #120]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	4918      	ldr	r1, [pc, #96]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	608b      	str	r3, [r1, #8]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4914      	ldr	r1, [pc, #80]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d021      	beq.n	8000f90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	490e      	ldr	r1, [pc, #56]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	60cb      	str	r3, [r1, #12]
 8000f58:	e021      	b.n	8000f9e <HAL_GPIO_Init+0x2e2>
 8000f5a:	bf00      	nop
 8000f5c:	10320000 	.word	0x10320000
 8000f60:	10310000 	.word	0x10310000
 8000f64:	10220000 	.word	0x10220000
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40011000 	.word	0x40011000
 8000f88:	40011400 	.word	0x40011400
 8000f8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4909      	ldr	r1, [pc, #36]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f47f ae8e 	bne.w	8000cd0 <HAL_GPIO_Init+0x14>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	372c      	adds	r7, #44	; 0x2c
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e001      	b.n	8000fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]
 8000ffe:	4613      	mov	r3, r2
 8001000:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001002:	787b      	ldrb	r3, [r7, #1]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001008:	887a      	ldrh	r2, [r7, #2]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800100e:	e003      	b.n	8001018 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	041a      	lsls	r2, r3, #16
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	611a      	str	r2, [r3, #16]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001034:	887a      	ldrh	r2, [r7, #2]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4013      	ands	r3, r2
 800103a:	041a      	lsls	r2, r3, #16
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43d9      	mvns	r1, r3
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	400b      	ands	r3, r1
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fb3e 	bl	80006f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e26c      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8087 	beq.w	80011b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a4:	4b92      	ldr	r3, [pc, #584]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d00c      	beq.n	80010ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b0:	4b8f      	ldr	r3, [pc, #572]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d112      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5e>
 80010bc:	4b8c      	ldr	r3, [pc, #560]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d10b      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ca:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d06c      	beq.n	80011b0 <HAL_RCC_OscConfig+0x12c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d168      	bne.n	80011b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e246      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x76>
 80010ec:	4b80      	ldr	r3, [pc, #512]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a7f      	ldr	r2, [pc, #508]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e02e      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x98>
 8001102:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a7a      	ldr	r2, [pc, #488]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b78      	ldr	r3, [pc, #480]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a77      	ldr	r2, [pc, #476]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e01d      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0xbc>
 8001126:	4b72      	ldr	r3, [pc, #456]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a71      	ldr	r2, [pc, #452]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b6f      	ldr	r3, [pc, #444]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6e      	ldr	r2, [pc, #440]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 8001140:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a6a      	ldr	r2, [pc, #424]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a67      	ldr	r2, [pc, #412]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001156:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fc70 	bl	8000a44 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fc6c 	bl	8000a44 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e1fa      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0xe4>
 8001186:	e014      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc5c 	bl	8000a44 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fc58 	bl	8000a44 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1e6      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x10c>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d063      	beq.n	8001286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011be:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d11c      	bne.n	8001210 <HAL_RCC_OscConfig+0x18c>
 80011d6:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d116      	bne.n	8001210 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <HAL_RCC_OscConfig+0x176>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e1ba      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4939      	ldr	r1, [pc, #228]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	e03a      	b.n	8001286 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fc11 	bl	8000a44 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fc0d 	bl	8000a44 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e19b      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4927      	ldr	r1, [pc, #156]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e015      	b.n	8001286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fbf0 	bl	8000a44 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff fbec 	bl	8000a44 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e17a      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d03a      	beq.n	8001308 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d019      	beq.n	80012ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_RCC_OscConfig+0x274>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a0:	f7ff fbd0 	bl	8000a44 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fbcc 	bl	8000a44 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e15a      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f000 fad8 	bl	800187c <RCC_Delay>
 80012cc:	e01c      	b.n	8001308 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_RCC_OscConfig+0x274>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fbb6 	bl	8000a44 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012da:	e00f      	b.n	80012fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012dc:	f7ff fbb2 	bl	8000a44 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d908      	bls.n	80012fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e140      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	42420000 	.word	0x42420000
 80012f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b9e      	ldr	r3, [pc, #632]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1e9      	bne.n	80012dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a6 	beq.w	8001462 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b97      	ldr	r3, [pc, #604]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10d      	bne.n	8001342 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b94      	ldr	r3, [pc, #592]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a93      	ldr	r2, [pc, #588]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b91      	ldr	r3, [pc, #580]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133e:	2301      	movs	r3, #1
 8001340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001342:	4b8e      	ldr	r3, [pc, #568]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d118      	bne.n	8001380 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134e:	4b8b      	ldr	r3, [pc, #556]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a8a      	ldr	r2, [pc, #552]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135a:	f7ff fb73 	bl	8000a44 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001362:	f7ff fb6f 	bl	8000a44 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b64      	cmp	r3, #100	; 0x64
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0fd      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4b81      	ldr	r3, [pc, #516]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x312>
 8001388:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4a7a      	ldr	r2, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6213      	str	r3, [r2, #32]
 8001394:	e02d      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x334>
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	4b73      	ldr	r3, [pc, #460]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a72      	ldr	r2, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	e01c      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x356>
 80013c0:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a6c      	ldr	r2, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a69      	ldr	r2, [pc, #420]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6213      	str	r3, [r2, #32]
 80013d8:	e00b      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 80013da:	4b67      	ldr	r3, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a66      	ldr	r2, [pc, #408]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	4b64      	ldr	r3, [pc, #400]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a63      	ldr	r2, [pc, #396]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d015      	beq.n	8001426 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb23 	bl	8000a44 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fb1f 	bl	8000a44 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0ab      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	4b57      	ldr	r3, [pc, #348]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0ee      	beq.n	8001402 <HAL_RCC_OscConfig+0x37e>
 8001424:	e014      	b.n	8001450 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fb0d 	bl	8000a44 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fb09 	bl	8000a44 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e095      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1ee      	bne.n	800142e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d105      	bne.n	8001462 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001456:	4b48      	ldr	r3, [pc, #288]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a47      	ldr	r2, [pc, #284]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8081 	beq.w	800156e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800146c:	4b42      	ldr	r3, [pc, #264]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d061      	beq.n	800153c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d146      	bne.n	800150e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fadd 	bl	8000a44 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148e:	f7ff fad9 	bl	8000a44 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e067      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d108      	bne.n	80014c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	492d      	ldr	r1, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a19      	ldr	r1, [r3, #32]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	430b      	orrs	r3, r1
 80014da:	4927      	ldr	r1, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff faad 	bl	8000a44 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff faa9 	bl	8000a44 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e037      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x46a>
 800150c:	e02f      	b.n	800156e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fa96 	bl	8000a44 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff fa92 	bl	8000a44 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e020      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x498>
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e013      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	429a      	cmp	r2, r3
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	40007000 	.word	0x40007000
 8001580:	42420060 	.word	0x42420060

08001584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0d0      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d910      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	4965      	ldr	r1, [pc, #404]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a52      	ldr	r2, [pc, #328]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d040      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d115      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e073      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06b      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f023 0203 	bic.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4936      	ldr	r1, [pc, #216]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff f9e6 	bl	8000a44 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff f9e2 	bl	8000a44 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e053      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 020c 	and.w	r2, r3, #12
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1eb      	bne.n	800167c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d210      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0207 	bic.w	r2, r3, #7
 80016ba:	4922      	ldr	r1, [pc, #136]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4602      	mov	r2, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	490a      	ldr	r1, [pc, #40]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	5ccb      	ldrb	r3, [r1, r3]
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_RCC_ClockConfig+0x1cc>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1d0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f944 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000
 8001748:	40021000 	.word	0x40021000
 800174c:	08002234 	.word	0x08002234
 8001750:	2000000c 	.word	0x2000000c
 8001754:	20000010 	.word	0x20000010

08001758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	b490      	push	{r4, r7}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001760:	1d3c      	adds	r4, r7, #4
 8001762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001768:	f240 2301 	movw	r3, #513	; 0x201
 800176c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b04      	cmp	r3, #4
 8001790:	d002      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x40>
 8001792:	2b08      	cmp	r3, #8
 8001794:	d003      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x46>
 8001796:	e02d      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb8>)
 800179a:	623b      	str	r3, [r7, #32]
      break;
 800179c:	e02d      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017aa:	4413      	add	r3, r2
 80017ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_RCC_GetSysClockFreq+0xb4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	0c5b      	lsrs	r3, r3, #17
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ca:	4413      	add	r3, r2
 80017cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017d6:	fb02 f203 	mul.w	r2, r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
 80017e2:	e004      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	623b      	str	r3, [r7, #32]
      break;
 80017f2:	e002      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f6:	623b      	str	r3, [r7, #32]
      break;
 80017f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fa:	6a3b      	ldr	r3, [r7, #32]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bc90      	pop	{r4, r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	08002224 	.word	0x08002224
 800180c:	40021000 	.word	0x40021000
 8001810:	007a1200 	.word	0x007a1200
 8001814:	003d0900 	.word	0x003d0900

08001818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800181c:	4b02      	ldr	r3, [pc, #8]	; (8001828 <HAL_RCC_GetHCLKFreq+0x10>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	2000000c 	.word	0x2000000c

0800182c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001830:	f7ff fff2 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 8001834:	4602      	mov	r2, r0
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	4903      	ldr	r1, [pc, #12]	; (8001850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001842:	5ccb      	ldrb	r3, [r1, r3]
 8001844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	08002244 	.word	0x08002244

08001854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001858:	f7ff ffde 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	0adb      	lsrs	r3, r3, #11
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	4903      	ldr	r1, [pc, #12]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	08002244 	.word	0x08002244

0800187c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <RCC_Delay+0x34>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <RCC_Delay+0x38>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0a5b      	lsrs	r3, r3, #9
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001898:	bf00      	nop
  }
  while (Delay --);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1e5a      	subs	r2, r3, #1
 800189e:	60fa      	str	r2, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f9      	bne.n	8001898 <RCC_Delay+0x1c>
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	10624dd3 	.word	0x10624dd3

080018b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e041      	b.n	800194e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7fe ff8c 	bl	80007fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f000 f93c 	bl	8001b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b01      	cmp	r3, #1
 800196a:	d001      	beq.n	8001970 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e032      	b.n	80019d6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <HAL_TIM_Base_Start+0x88>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00e      	beq.n	80019a0 <HAL_TIM_Base_Start+0x48>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198a:	d009      	beq.n	80019a0 <HAL_TIM_Base_Start+0x48>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <HAL_TIM_Base_Start+0x8c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d004      	beq.n	80019a0 <HAL_TIM_Base_Start+0x48>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <HAL_TIM_Base_Start+0x90>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d111      	bne.n	80019c4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d010      	beq.n	80019d4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c2:	e007      	b.n	80019d4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	40012c00 	.word	0x40012c00
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40000800 	.word	0x40000800

080019ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_TIM_ConfigClockSource+0x18>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e0b3      	b.n	8001b6c <HAL_TIM_ConfigClockSource+0x180>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a3c:	d03e      	beq.n	8001abc <HAL_TIM_ConfigClockSource+0xd0>
 8001a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a42:	f200 8087 	bhi.w	8001b54 <HAL_TIM_ConfigClockSource+0x168>
 8001a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a4a:	f000 8085 	beq.w	8001b58 <HAL_TIM_ConfigClockSource+0x16c>
 8001a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a52:	d87f      	bhi.n	8001b54 <HAL_TIM_ConfigClockSource+0x168>
 8001a54:	2b70      	cmp	r3, #112	; 0x70
 8001a56:	d01a      	beq.n	8001a8e <HAL_TIM_ConfigClockSource+0xa2>
 8001a58:	2b70      	cmp	r3, #112	; 0x70
 8001a5a:	d87b      	bhi.n	8001b54 <HAL_TIM_ConfigClockSource+0x168>
 8001a5c:	2b60      	cmp	r3, #96	; 0x60
 8001a5e:	d050      	beq.n	8001b02 <HAL_TIM_ConfigClockSource+0x116>
 8001a60:	2b60      	cmp	r3, #96	; 0x60
 8001a62:	d877      	bhi.n	8001b54 <HAL_TIM_ConfigClockSource+0x168>
 8001a64:	2b50      	cmp	r3, #80	; 0x50
 8001a66:	d03c      	beq.n	8001ae2 <HAL_TIM_ConfigClockSource+0xf6>
 8001a68:	2b50      	cmp	r3, #80	; 0x50
 8001a6a:	d873      	bhi.n	8001b54 <HAL_TIM_ConfigClockSource+0x168>
 8001a6c:	2b40      	cmp	r3, #64	; 0x40
 8001a6e:	d058      	beq.n	8001b22 <HAL_TIM_ConfigClockSource+0x136>
 8001a70:	2b40      	cmp	r3, #64	; 0x40
 8001a72:	d86f      	bhi.n	8001b54 <HAL_TIM_ConfigClockSource+0x168>
 8001a74:	2b30      	cmp	r3, #48	; 0x30
 8001a76:	d064      	beq.n	8001b42 <HAL_TIM_ConfigClockSource+0x156>
 8001a78:	2b30      	cmp	r3, #48	; 0x30
 8001a7a:	d86b      	bhi.n	8001b54 <HAL_TIM_ConfigClockSource+0x168>
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d060      	beq.n	8001b42 <HAL_TIM_ConfigClockSource+0x156>
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d867      	bhi.n	8001b54 <HAL_TIM_ConfigClockSource+0x168>
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d05c      	beq.n	8001b42 <HAL_TIM_ConfigClockSource+0x156>
 8001a88:	2b10      	cmp	r3, #16
 8001a8a:	d05a      	beq.n	8001b42 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001a8c:	e062      	b.n	8001b54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6899      	ldr	r1, [r3, #8]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f000 f942 	bl	8001d26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ab0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	609a      	str	r2, [r3, #8]
      break;
 8001aba:	e04e      	b.n	8001b5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f000 f92b 	bl	8001d26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ade:	609a      	str	r2, [r3, #8]
      break;
 8001ae0:	e03b      	b.n	8001b5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6859      	ldr	r1, [r3, #4]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f000 f8a2 	bl	8001c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2150      	movs	r1, #80	; 0x50
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f8f9 	bl	8001cf2 <TIM_ITRx_SetConfig>
      break;
 8001b00:	e02b      	b.n	8001b5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6859      	ldr	r1, [r3, #4]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f000 f8c0 	bl	8001c94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2160      	movs	r1, #96	; 0x60
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f8e9 	bl	8001cf2 <TIM_ITRx_SetConfig>
      break;
 8001b20:	e01b      	b.n	8001b5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f000 f882 	bl	8001c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2140      	movs	r1, #64	; 0x40
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f8d9 	bl	8001cf2 <TIM_ITRx_SetConfig>
      break;
 8001b40:	e00b      	b.n	8001b5a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f000 f8d0 	bl	8001cf2 <TIM_ITRx_SetConfig>
        break;
 8001b52:	e002      	b.n	8001b5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <TIM_Base_SetConfig+0xb8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00b      	beq.n	8001ba4 <TIM_Base_SetConfig+0x30>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b92:	d007      	beq.n	8001ba4 <TIM_Base_SetConfig+0x30>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a26      	ldr	r2, [pc, #152]	; (8001c30 <TIM_Base_SetConfig+0xbc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d003      	beq.n	8001ba4 <TIM_Base_SetConfig+0x30>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <TIM_Base_SetConfig+0xc0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d108      	bne.n	8001bb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <TIM_Base_SetConfig+0xb8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00b      	beq.n	8001bd6 <TIM_Base_SetConfig+0x62>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc4:	d007      	beq.n	8001bd6 <TIM_Base_SetConfig+0x62>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <TIM_Base_SetConfig+0xbc>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d003      	beq.n	8001bd6 <TIM_Base_SetConfig+0x62>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <TIM_Base_SetConfig+0xc0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d108      	bne.n	8001be8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <TIM_Base_SetConfig+0xb8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d103      	bne.n	8001c1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	615a      	str	r2, [r3, #20]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40012c00 	.word	0x40012c00
 8001c30:	40000400 	.word	0x40000400
 8001c34:	40000800 	.word	0x40000800

08001c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	f023 0201 	bic.w	r2, r3, #1
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f023 030a 	bic.w	r3, r3, #10
 8001c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	621a      	str	r2, [r3, #32]
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f023 0210 	bic.w	r2, r3, #16
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001cbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	031b      	lsls	r3, r3, #12
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	621a      	str	r2, [r3, #32]
}
 8001ce8:	bf00      	nop
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f043 0307 	orr.w	r3, r3, #7
 8001d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	609a      	str	r2, [r3, #8]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b087      	sub	sp, #28
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	021a      	lsls	r2, r3, #8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	609a      	str	r2, [r3, #8]
}
 8001d5a:	bf00      	nop
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e046      	b.n	8001e0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00e      	beq.n	8001dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc8:	d009      	beq.n	8001dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d004      	beq.n	8001dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a10      	ldr	r2, [pc, #64]	; (8001e1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10c      	bne.n	8001df8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	40012c00 	.word	0x40012c00
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40000800 	.word	0x40000800

08001e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e03f      	b.n	8001eb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fcf6 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f905 	bl	8002074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b08a      	sub	sp, #40	; 0x28
 8001ebe:	af02      	add	r7, sp, #8
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d17c      	bne.n	8001fd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_UART_Transmit+0x2c>
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e075      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_UART_Transmit+0x3e>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e06e      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2221      	movs	r2, #33	; 0x21
 8001f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f0e:	f7fe fd99 	bl	8000a44 <HAL_GetTick>
 8001f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	88fa      	ldrh	r2, [r7, #6]
 8001f18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	88fa      	ldrh	r2, [r7, #6]
 8001f1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f28:	d108      	bne.n	8001f3c <HAL_UART_Transmit+0x82>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d104      	bne.n	8001f3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	e003      	b.n	8001f44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001f4c:	e02a      	b.n	8001fa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2200      	movs	r2, #0
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f840 	bl	8001fde <UART_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e036      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10b      	bne.n	8001f86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	3302      	adds	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e007      	b.n	8001f96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3301      	adds	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1cf      	bne.n	8001f4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2140      	movs	r1, #64	; 0x40
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f810 	bl	8001fde <UART_WaitOnFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e006      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e000      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fee:	e02c      	b.n	800204a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff6:	d028      	beq.n	800204a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <UART_WaitOnFlagUntilTimeout+0x30>
 8001ffe:	f7fe fd21 	bl	8000a44 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	429a      	cmp	r2, r3
 800200c:	d21d      	bcs.n	800204a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800201c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e00f      	b.n	800206a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4013      	ands	r3, r2
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	429a      	cmp	r2, r3
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	429a      	cmp	r2, r3
 8002066:	d0c3      	beq.n	8001ff0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020ae:	f023 030c 	bic.w	r3, r3, #12
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a2c      	ldr	r2, [pc, #176]	; (8002188 <UART_SetConfig+0x114>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d103      	bne.n	80020e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020dc:	f7ff fbba 	bl	8001854 <HAL_RCC_GetPCLK2Freq>
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	e002      	b.n	80020ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020e4:	f7ff fba2 	bl	800182c <HAL_RCC_GetPCLK1Freq>
 80020e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	009a      	lsls	r2, r3, #2
 80020f4:	441a      	add	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	4a22      	ldr	r2, [pc, #136]	; (800218c <UART_SetConfig+0x118>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	0119      	lsls	r1, r3, #4
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	009a      	lsls	r2, r3, #2
 8002114:	441a      	add	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <UART_SetConfig+0x118>)
 8002122:	fba3 0302 	umull	r0, r3, r3, r2
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2064      	movs	r0, #100	; 0x64
 800212a:	fb00 f303 	mul.w	r3, r0, r3
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	3332      	adds	r3, #50	; 0x32
 8002134:	4a15      	ldr	r2, [pc, #84]	; (800218c <UART_SetConfig+0x118>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002140:	4419      	add	r1, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	009a      	lsls	r2, r3, #2
 800214c:	441a      	add	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fbb2 f2f3 	udiv	r2, r2, r3
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <UART_SetConfig+0x118>)
 800215a:	fba3 0302 	umull	r0, r3, r3, r2
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2064      	movs	r0, #100	; 0x64
 8002162:	fb00 f303 	mul.w	r3, r0, r3
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	3332      	adds	r3, #50	; 0x32
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <UART_SetConfig+0x118>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	f003 020f 	and.w	r2, r3, #15
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	440a      	add	r2, r1
 800217e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40013800 	.word	0x40013800
 800218c:	51eb851f 	.word	0x51eb851f

08002190 <__libc_init_array>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	2600      	movs	r6, #0
 8002194:	4d0c      	ldr	r5, [pc, #48]	; (80021c8 <__libc_init_array+0x38>)
 8002196:	4c0d      	ldr	r4, [pc, #52]	; (80021cc <__libc_init_array+0x3c>)
 8002198:	1b64      	subs	r4, r4, r5
 800219a:	10a4      	asrs	r4, r4, #2
 800219c:	42a6      	cmp	r6, r4
 800219e:	d109      	bne.n	80021b4 <__libc_init_array+0x24>
 80021a0:	f000 f822 	bl	80021e8 <_init>
 80021a4:	2600      	movs	r6, #0
 80021a6:	4d0a      	ldr	r5, [pc, #40]	; (80021d0 <__libc_init_array+0x40>)
 80021a8:	4c0a      	ldr	r4, [pc, #40]	; (80021d4 <__libc_init_array+0x44>)
 80021aa:	1b64      	subs	r4, r4, r5
 80021ac:	10a4      	asrs	r4, r4, #2
 80021ae:	42a6      	cmp	r6, r4
 80021b0:	d105      	bne.n	80021be <__libc_init_array+0x2e>
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b8:	4798      	blx	r3
 80021ba:	3601      	adds	r6, #1
 80021bc:	e7ee      	b.n	800219c <__libc_init_array+0xc>
 80021be:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c2:	4798      	blx	r3
 80021c4:	3601      	adds	r6, #1
 80021c6:	e7f2      	b.n	80021ae <__libc_init_array+0x1e>
 80021c8:	0800224c 	.word	0x0800224c
 80021cc:	0800224c 	.word	0x0800224c
 80021d0:	0800224c 	.word	0x0800224c
 80021d4:	08002250 	.word	0x08002250

080021d8 <memset>:
 80021d8:	4603      	mov	r3, r0
 80021da:	4402      	add	r2, r0
 80021dc:	4293      	cmp	r3, r2
 80021de:	d100      	bne.n	80021e2 <memset+0xa>
 80021e0:	4770      	bx	lr
 80021e2:	f803 1b01 	strb.w	r1, [r3], #1
 80021e6:	e7f9      	b.n	80021dc <memset+0x4>

080021e8 <_init>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	bf00      	nop
 80021ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ee:	bc08      	pop	{r3}
 80021f0:	469e      	mov	lr, r3
 80021f2:	4770      	bx	lr

080021f4 <_fini>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	bf00      	nop
 80021f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fa:	bc08      	pop	{r3}
 80021fc:	469e      	mov	lr, r3
 80021fe:	4770      	bx	lr
